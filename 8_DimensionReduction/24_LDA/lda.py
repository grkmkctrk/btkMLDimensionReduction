# -*- coding: utf-8 -*-
"""LDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O1oagG9AbtShbe9VWGVD_7RvxmKAL8rm
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""**Veri yukleme**"""

veriler = pd.read_csv('/content/Wine.csv')

"""**DATA FRAME (SLICE) DILIMLEME**"""

X = veriler.iloc[:, :-1]
Y = veriler.iloc[:, -1]
# NUMPY ARRAY DIZI DONUSUMU
x = X.values
y = Y.values

from sklearn.model_selection import train_test_split

# verinin yuzde 66 si antrenman icin kullanilsin kalan yuzde 33'u test edilsin diye ayrdik
# random_state rastsal ayirma icin kullaniliyor ayni degeri alan her kod ayni ayrimi yapar
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)

"""**Verilerin normalize edilme islemi**"""

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()

# burasi bir tur normalizasyon islemi anlatiyor (x-mean)/standar_deviation denklemini kullanir
X_train = sc.fit_transform(x_train)
X_test = sc.fit_transform(x_test)

"""**PCA**"""

from sklearn.decomposition import PCA

pca = PCA(n_components = 2)

X_trainApca = pca.fit_transform(X_train)
X_testApca  = pca.transform(X_test)

from sklearn.linear_model import LogisticRegression
# pca'dan once
logReg = LogisticRegression(random_state=0)
logReg.fit(X_train, y_train)
y_pred = logReg.predict(X_test)

# pca'dan sonra
logRegApca = LogisticRegression(random_state=0)
logRegApca.fit(X_trainApca, y_train)
y_predApca = logRegApca.predict(X_testApca)

"""LDA"""

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as lda

lda = lda(n_components = 2)

# dikkat edilirse burada girdi degerlerinin ynainda ait olduklari siniflarida verdik (y boyutu)
X_trainAlda = lda.fit_transform(X_train, y_train)
X_testAlda = lda.fit_transform(X_test, y_test)

from sklearn.linear_model import LogisticRegression
# lda'dan sonra
logRegAlda = LogisticRegression(random_state=0)
logRegAlda.fit(X_trainAlda, y_train)
y_predAlda = logRegAlda.predict(X_testAlda)

from sklearn.metrics import confusion_matrix

print('before the process \n')
cm = confusion_matrix(y_test, y_pred)
print(cm , '\n')

print('after PCA \n')
cmApca = confusion_matrix(y_test, y_predApca)
print(cmApca , '\n')

print('after LDA \n')
cmAlda = confusion_matrix(y_test, y_predAlda)
print(cmAlda , '\n')

print('aralarindaki farklar')
cmFark = confusion_matrix(y_predAlda, y_predApca)
print(cmFark , '\n')

